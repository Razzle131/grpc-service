// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: schema.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomizerClient is the client API for Customizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomizerClient interface {
	GetHostName(ctx context.Context, in *GetHostRequest, opts ...grpc.CallOption) (*HostResponse, error)
	SetHostName(ctx context.Context, in *SetHostRequest, opts ...grpc.CallOption) (*HostResponse, error)
	AddDNS(ctx context.Context, in *SetDnsRequest, opts ...grpc.CallOption) (*SetDnsResponse, error)
	RemoveDNS(ctx context.Context, in *SetDnsRequest, opts ...grpc.CallOption) (*SetDnsResponse, error)
	GetDNS(ctx context.Context, in *GetDnsRequest, opts ...grpc.CallOption) (*GetDnsResponse, error)
}

type customizerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomizerClient(cc grpc.ClientConnInterface) CustomizerClient {
	return &customizerClient{cc}
}

func (c *customizerClient) GetHostName(ctx context.Context, in *GetHostRequest, opts ...grpc.CallOption) (*HostResponse, error) {
	out := new(HostResponse)
	err := c.cc.Invoke(ctx, "/Customizer/GetHostName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customizerClient) SetHostName(ctx context.Context, in *SetHostRequest, opts ...grpc.CallOption) (*HostResponse, error) {
	out := new(HostResponse)
	err := c.cc.Invoke(ctx, "/Customizer/SetHostName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customizerClient) AddDNS(ctx context.Context, in *SetDnsRequest, opts ...grpc.CallOption) (*SetDnsResponse, error) {
	out := new(SetDnsResponse)
	err := c.cc.Invoke(ctx, "/Customizer/AddDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customizerClient) RemoveDNS(ctx context.Context, in *SetDnsRequest, opts ...grpc.CallOption) (*SetDnsResponse, error) {
	out := new(SetDnsResponse)
	err := c.cc.Invoke(ctx, "/Customizer/RemoveDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customizerClient) GetDNS(ctx context.Context, in *GetDnsRequest, opts ...grpc.CallOption) (*GetDnsResponse, error) {
	out := new(GetDnsResponse)
	err := c.cc.Invoke(ctx, "/Customizer/GetDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomizerServer is the server API for Customizer service.
// All implementations must embed UnimplementedCustomizerServer
// for forward compatibility
type CustomizerServer interface {
	GetHostName(context.Context, *GetHostRequest) (*HostResponse, error)
	SetHostName(context.Context, *SetHostRequest) (*HostResponse, error)
	AddDNS(context.Context, *SetDnsRequest) (*SetDnsResponse, error)
	RemoveDNS(context.Context, *SetDnsRequest) (*SetDnsResponse, error)
	GetDNS(context.Context, *GetDnsRequest) (*GetDnsResponse, error)
	mustEmbedUnimplementedCustomizerServer()
}

// UnimplementedCustomizerServer must be embedded to have forward compatible implementations.
type UnimplementedCustomizerServer struct {
}

func (UnimplementedCustomizerServer) GetHostName(context.Context, *GetHostRequest) (*HostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostName not implemented")
}
func (UnimplementedCustomizerServer) SetHostName(context.Context, *SetHostRequest) (*HostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostName not implemented")
}
func (UnimplementedCustomizerServer) AddDNS(context.Context, *SetDnsRequest) (*SetDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDNS not implemented")
}
func (UnimplementedCustomizerServer) RemoveDNS(context.Context, *SetDnsRequest) (*SetDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDNS not implemented")
}
func (UnimplementedCustomizerServer) GetDNS(context.Context, *GetDnsRequest) (*GetDnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNS not implemented")
}
func (UnimplementedCustomizerServer) mustEmbedUnimplementedCustomizerServer() {}

// UnsafeCustomizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomizerServer will
// result in compilation errors.
type UnsafeCustomizerServer interface {
	mustEmbedUnimplementedCustomizerServer()
}

func RegisterCustomizerServer(s grpc.ServiceRegistrar, srv CustomizerServer) {
	s.RegisterService(&Customizer_ServiceDesc, srv)
}

func _Customizer_GetHostName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomizerServer).GetHostName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Customizer/GetHostName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomizerServer).GetHostName(ctx, req.(*GetHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customizer_SetHostName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomizerServer).SetHostName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Customizer/SetHostName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomizerServer).SetHostName(ctx, req.(*SetHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customizer_AddDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomizerServer).AddDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Customizer/AddDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomizerServer).AddDNS(ctx, req.(*SetDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customizer_RemoveDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomizerServer).RemoveDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Customizer/RemoveDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomizerServer).RemoveDNS(ctx, req.(*SetDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customizer_GetDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomizerServer).GetDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Customizer/GetDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomizerServer).GetDNS(ctx, req.(*GetDnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Customizer_ServiceDesc is the grpc.ServiceDesc for Customizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Customizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Customizer",
	HandlerType: (*CustomizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostName",
			Handler:    _Customizer_GetHostName_Handler,
		},
		{
			MethodName: "SetHostName",
			Handler:    _Customizer_SetHostName_Handler,
		},
		{
			MethodName: "AddDNS",
			Handler:    _Customizer_AddDNS_Handler,
		},
		{
			MethodName: "RemoveDNS",
			Handler:    _Customizer_RemoveDNS_Handler,
		},
		{
			MethodName: "GetDNS",
			Handler:    _Customizer_GetDNS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}
